{"version":3,"file":"static/js/115.80acdbdd.chunk.js","mappings":"+MA6DA,UAtDe,WACb,OAAsCA,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA0CF,EAAAA,EAAAA,UAAS,IAAnD,eAAOG,EAAP,KAAsBC,EAAtB,KAEMC,EAAY,mCAAG,+GAEMC,MAAM,GAAD,OATjB,+BASiB,iCARlB,mCAQkB,kBAC2BL,IAHtC,cAEXM,EAFW,gBAKEA,EAASC,OALX,OAKXC,EALW,OAMjBL,EAAiBK,EAAKC,SANL,kDAQjBC,QAAQC,IAAI,0BAAZ,MARiB,0DAAH,qDAqBlB,OACE,4BACE,kBAAMC,SAPW,SAAAC,GACnBA,EAAMC,iBACNV,GACD,EAIG,WACE,kBAAOW,KAAK,OAAOC,MAAOhB,EAAaiB,SAZxB,SAAAJ,GACnBZ,EAAeY,EAAMK,OAAOF,MAC7B,KAWK,mBAAQD,KAAK,SAAb,wBAEF,wBACGb,EAAciB,KAAI,SAAAC,GAAK,OACtB,0BACE,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAME,IAA3B,SAAkCF,EAAMG,WAFlCH,EAAME,GADM,QAU/B,C,sBCjDD,SAASE,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBf,EAAQgB,EAAKhB,KAInB,CAHE,MAAOiB,GAEP,YADAN,EAAOM,EAET,CAEID,EAAKE,KACPR,EAAQV,GAERmB,QAAQT,QAAQV,GAAOoB,KAAKR,EAAOC,EAEvC,CAEe,SAASQ,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIP,SAAQ,SAAUT,EAASC,GACpC,IAAIF,EAAMa,EAAGK,MAAMJ,EAAME,GAEzB,SAASb,EAAMZ,GACbQ,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQb,EAClE,CAEA,SAASa,EAAOe,GACdpB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASe,EACnE,CAEAhB,OAAMiB,EACR,GACF,CACF,C","sources":["components/Movies/Movies.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'e6dcd31a9bcf35c6ea88f864789b7c2f';\n\nconst Movies = () => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n\n  const handleSearch = async () => {\n    try {\n      const response = await fetch(\n        `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${searchQuery}`\n      );\n      const data = await response.json();\n      setSearchResults(data.results);\n    } catch (error) {\n      console.log('Error searching movies:', error);\n    }\n  };\n\n  const handleChange = event => {\n    setSearchQuery(event.target.value);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    handleSearch();\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" value={searchQuery} onChange={handleChange} />\n        <button type=\"submit\">Search</button>\n      </form>\n      <ul>\n        {searchResults.map(movie => (\n          <div key={movie.id}>\n            <li>\n              <Link to={`/movies/${movie.id}`}>{movie.title}</Link>\n            </li>\n          </div>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nMovies.propTypes = {\n  searchQuery: PropTypes.string,\n  searchResults: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      title: PropTypes.string,\n    })\n  ),\n};\n\nexport default Movies;\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["useState","searchQuery","setSearchQuery","searchResults","setSearchResults","handleSearch","fetch","response","json","data","results","console","log","onSubmit","event","preventDefault","type","value","onChange","target","map","movie","to","id","title","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}