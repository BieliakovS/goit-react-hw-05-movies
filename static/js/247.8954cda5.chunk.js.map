{"version":3,"file":"static/js/247.8954cda5.chunk.js","mappings":"gNAiDA,UA3Ca,WACX,OAAwBA,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAkBR,OAhBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,+GAESC,MAAM,GAAD,OAVnB,+BAUmB,kBACLJ,EADK,4BATpB,qCAOM,cAERK,EAFQ,gBAKKA,EAASC,OALd,OAKRC,EALQ,OAMdR,EAAQQ,EAAKT,MANC,kDAQdU,QAAQC,IAAI,uBAAZ,MARc,0DAAH,qDAYfN,GACD,GAAE,CAACH,EAASD,KAGX,4BACE,iCACCD,EAAKY,OAAS,GACb,eAAIC,UAAU,YAAd,SACGb,EAAKc,KAAI,SAAAC,GAAK,OACb,2BACE,gBACEC,IAAG,yCAAoCD,EAAME,cAC7CC,IAAI,MAEN,uBAAIH,EAAMI,QACV,uCAAeJ,EAAMK,eANdL,EAAMM,GADF,OAYjB,2DAIP,C,sBC/CD,SAASC,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOC,GAEP,YADAP,EAAOO,EAET,CAEIF,EAAKG,KACPT,EAAQO,GAERG,QAAQV,QAAQO,GAAOI,KAAKT,EAAOC,EAEvC,CAEe,SAASS,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIP,SAAQ,SAAUV,EAASC,GACpC,IAAIF,EAAMc,EAAGK,MAAMJ,EAAME,GAEzB,SAASd,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAOgB,GACdrB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASgB,EACnE,CAEAjB,OAAMkB,EACR,GACF,CACF,C","sources":["components/Cast/Cast.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'e6dcd31a9bcf35c6ea88f864789b7c2f';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        const response = await fetch(\n          `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`\n        );\n        const data = await response.json();\n        setCast(data.cast);\n      } catch (error) {\n        console.log('Error fetching cast:', error);\n      }\n    };\n\n    fetchCast();\n  }, [movieId, setCast]);\n\n  return (\n    <div>\n      <h2>Cast</h2>\n      {cast.length > 0 ? (\n        <ul className=\"cast-list\">\n          {cast.map(actor => (\n            <li key={actor.id}>\n              <img\n                src={`https://image.tmdb.org/t/p/w200${actor.profile_path}`}\n                alt=\"\"\n              />\n              <p>{actor.name}</p>\n              <p>Character: {actor.character}</p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>No cast information available</p>\n      )}\n    </div>\n  );\n};\n\nexport default Cast;\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["useState","cast","setCast","movieId","useParams","useEffect","fetchCast","fetch","response","json","data","console","log","length","className","map","actor","src","profile_path","alt","name","character","id","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}