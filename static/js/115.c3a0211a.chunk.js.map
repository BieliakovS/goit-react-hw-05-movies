{"version":3,"file":"static/js/115.c3a0211a.chunk.js","mappings":"wNAyGA,UA7Fe,WACb,OAAsCA,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA0CF,EAAAA,EAAAA,UAAS,IAAnD,eAAOG,EAAP,KAAsBC,EAAtB,KACA,GAA0DJ,EAAAA,EAAAA,UAAS,IAAnE,eAAOK,EAAP,KAA8BC,EAA9B,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAkBC,KAAKC,MAC3BC,aAAaC,QAAQ,0BAEvBb,EAAyBS,GAAmB,GAC7C,GAAE,IAEH,IAAMK,GAAeC,EAAAA,EAAAA,cAAW,iBAAC,+GAENC,MAAM,GAAD,OApBjB,+BAoBiB,iCAnBlB,mCAmBkB,kBAC2BrB,IAH1B,cAEvBsB,EAFuB,gBAKVA,EAASC,OALC,OAKvBC,EALuB,OAM7BrB,EAAiBqB,EAAKC,SACtBR,aAAaS,QACX,wBACAX,KAAKY,UAAUH,EAAKC,UATO,kDAY7BG,QAAQC,IAAI,uBAAZ,MAZ6B,0DAc9B,CAAC7B,KAEJa,EAAAA,EAAAA,YAAU,WACR,IAAMiB,EAAQvB,EAAawB,IAAI,SAC3BD,IACF7B,EAAe6B,GACfX,IAEH,GAAE,CAACZ,EAAcY,IAiBlB,OACE,4BACE,kBAAMa,SAbW,SAAAC,GACnBA,EAAMC,iBACN1B,EAAgB,CAAEsB,MAAO9B,IACzBmB,GACD,EASG,WACE,kBAAOgB,KAAK,OAAOC,MAAOpC,EAAaqC,SAlBxB,SAAAJ,GACnBhC,EAAegC,EAAMK,OAAOF,MAC7B,KAiBK,mBAAQD,KAAK,SAAb,+CAEqB,YAAtB1B,EAAS8B,WACR,mBAAQC,QAZO,WACnBrC,EAAiBC,GACjBO,GAAU,EACX,EASK,6CAEF,wBACGT,EAAcuC,KAAI,SAAAC,GAAK,OACtB,0BACE,yBACE,SAAC,KAAD,CACEC,GAAI,CACFJ,SAAS,WAAD,OAAaG,EAAME,IAC3BC,MAAO,CAAE3C,cAAAA,IAEXsC,QAAS,kBAAMhC,EAAgB,CAAEsB,MAAO9B,GAA/B,EALX,SAOG0C,EAAMI,WATHJ,EAAME,GADM,QAkB/B,C,sBC9FD,SAASG,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBlB,EAAQmB,EAAKnB,KAInB,CAHE,MAAOoB,GAEP,YADAN,EAAOM,EAET,CAEID,EAAKE,KACPR,EAAQb,GAERsB,QAAQT,QAAQb,GAAOuB,KAAKR,EAAOC,EAEvC,CAEe,SAASQ,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIP,SAAQ,SAAUT,EAASC,GACpC,IAAIF,EAAMa,EAAGK,MAAMJ,EAAME,GAEzB,SAASb,EAAMf,GACbW,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQhB,EAClE,CAEA,SAASgB,EAAOe,GACdpB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASe,EACnE,CAEAhB,OAAMiB,EACR,GACF,CACF,C","sources":["components/Movies/Movies.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport {\n  Link,\n  useLocation,\n  useSearchParams,\n  useNavigate,\n} from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'e6dcd31a9bcf35c6ea88f864789b7c2f';\n\nconst Movies = () => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  const [previousSearchResults, setPreviousSearchResults] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const previousResults = JSON.parse(\n      localStorage.getItem('previousSearchResults')\n    );\n    setPreviousSearchResults(previousResults || []);\n  }, []);\n\n  const handleSearch = useCallback(async () => {\n    try {\n      const response = await fetch(\n        `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${searchQuery}`\n      );\n      const data = await response.json();\n      setSearchResults(data.results);\n      localStorage.setItem(\n        'previousSearchResults',\n        JSON.stringify(data.results)\n      );\n    } catch (error) {\n      console.log('error search movies:', error);\n    }\n  }, [searchQuery]);\n\n  useEffect(() => {\n    const query = searchParams.get('query');\n    if (query) {\n      setSearchQuery(query);\n      handleSearch();\n    }\n  }, [searchParams, handleSearch]);\n\n  const handleChange = event => {\n    setSearchQuery(event.target.value);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    setSearchParams({ query: searchQuery });\n    handleSearch();\n  };\n\n  const handleGoBack = () => {\n    setSearchResults(previousSearchResults);\n    navigate(-1);\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" value={searchQuery} onChange={handleChange} />\n        <button type=\"submit\">Пошук</button>\n      </form>\n      {location.pathname !== '/movies' && (\n        <button onClick={handleGoBack}>Назад</button>\n      )}\n      <ul>\n        {searchResults.map(movie => (\n          <div key={movie.id}>\n            <li>\n              <Link\n                to={{\n                  pathname: `/movies/${movie.id}`,\n                  state: { searchResults },\n                }}\n                onClick={() => setSearchParams({ query: searchQuery })}\n              >\n                {movie.title}\n              </Link>\n            </li>\n          </div>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nMovies.propTypes = {\n  searchResults: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default Movies;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["useState","searchQuery","setSearchQuery","searchResults","setSearchResults","previousSearchResults","setPreviousSearchResults","useSearchParams","searchParams","setSearchParams","location","useLocation","navigate","useNavigate","useEffect","previousResults","JSON","parse","localStorage","getItem","handleSearch","useCallback","fetch","response","json","data","results","setItem","stringify","console","log","query","get","onSubmit","event","preventDefault","type","value","onChange","target","pathname","onClick","map","movie","to","id","state","title","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}